add,100000,ArithLog,Register        // rd = rs + rt
addu,100001,ArithLog,Register       // rd = rs + rt "UNSIGNED"
addi,001000,ArithLogI,Immediate     // rd = rs + constant
addiu,001001,ArithLogI,Immediate    // rd = rs + constant
and,100100,ArithLog,Register        // rd = rs & rt
andi,001100,ArithLogI,Immediate     // rd = rs & (unsigned) constant
div,011010,DivMult,Register         // hi = rs % rt; lo = rs / rt;
divu,011011,DivMult,Register        // hi = rs % rt; lo = rs / rt;
mult,011000,DivMult,Register        // hilo = rs * rt
multu,011001,DivMult,Register       // hilo = rs * rt
nor,100111,ArithLog,Register        // rd = ~(rs | rt)
or,100101,ArithLog,Register         // rd = rs | rt
ori,001101,ArithLogI,Immediate      // rd = rs | (unsigned) constant
lui,001111,LoadI,Immediate      // rd = constant << 16
sll,000000,Shift,Register           // rd = rt << amount
sra,000011,Shift,Register           // "SIGNED" rt >> amount
srl,000010,Shift,Register           // rd = "UNSIGNED" rt >> amount
sub,100010,ArithLog,Register        // rd = rs - rt
subu,100011,ArithLog,Register       // rd = rs - rt "UNSIGNED"
xor,100110,ArithLog,Register        // rd = rs ^ rt
xori,001110,ArithLogI,Immediate     // rd = rs ^ (unsigned) constant
slt,101010,ArithLog,Register        // rd = (rs < rt)
sltu,101001,ArithLog,Register       // rd = (rs < rt)
slti,001010,ArithLogI,Immediate     // rd = (rs < constant)
sltiu,001011,ArithLogI,Immediate    // rd = (rs < constant)
beq,000100,Branch,Immediate         // if (rs == rt) goto label
bne,000101,Branch,Immediate         // if (rs != rt) goto label
j,000010,Jump,Jump                  // goto label
jal,000011,Jump,Jump                // label()
jr,001000,JumpR,Register            // (Used w/$31 to translate return)
lb,100000,LoadStore,Immediate       // Load Byte
lbu,100100,LoadStore,Immediate      // Load Byte "UNSIGNED"
lh,100001,LoadStore,Immediate       // Load Half-Word
lhu,100101,LoadStore,Immediate      // Load Half-Word "UNSIGNED"
lw,100011,LoadStore,Immediate       // Load Word
sb,101000,LoadStore,Immediate       // Save Byte
sh,101001,LoadStore,Immediate       // Save Half-Word
sw,101011,LoadStore,Immediate       // save Word
mfhi,010000,MoveFrom,Register       // rd = hi
mflo,010010,MoveFrom,Register       // rd = lo